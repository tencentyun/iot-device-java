apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 29
    buildToolsVersion "26.0.3"

    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    ndkVersion '22.1.7171670'

    sourceSets.main {
        jni.srcDirs = []
        assets.srcDirs = ["src/main/assets"]
    }

    lintOptions {
        abortOnError false
    }
}

repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
    api fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation 'com.alibaba:fastjson:1.2.73'
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.4'
    api 'com.tencent.iot.thirdparty.android:xp2p-sdk:2.4.30'
    api 'com.tencent.iot.thirdparty.android:ijkplayer-java:1.0.7'
    api 'com.tencent.iot.thirdparty.android:ijkplayer-armv7a:1.0.7'
    api 'com.tencent.iot.thirdparty.android:ijkplayer-arm64:1.0.7'
    api project(':explorer:explorer-media-common')
    //xxxapi project(':explorer:explorer//xxx-media-common')
    if (findProject(':explorer:explorer-device-android') != null) {
        implementation project(':explorer:explorer-device-android')
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

task androidJavadocs(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompile.classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

def libVersion = rootProject.ext.sdk.version
ext.isReleaseVersion = !libVersion.endsWith("SNAPSHOT")
publishing {
    publications {
        aar(MavenPublication) {
            groupId 'com.tencent.iot.explorer'
            artifactId 'explorer-device-video'
            version libVersion
            artifact(androidSourcesJar)
            artifact(androidJavadocsJar)
            artifact file('build/outputs/aar/explorer-device-video-release.aar')

            pom {
                name = 'explorer device video'
                description = 'Explorer Device Video library'
                url = 'https://github.com/tencentyun/iot-device-java/tree/master/explorer/explorer-device-android'
                licenses {
                    license {
                        name = 'Tencent Binary License'
                        url = 'https://github.com/tencentyun/iot-device-java/blob/master/explorer/explorer-device-android/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'tencent_archurtan'
                        name = 'Tencent archurtan'
                        email = 'archurtan@tencent.com'
                    }
                }
                scm {
                    url = 'scm:git@github.com:tencentyun/iot-device-java.git'
                    connection = 'scm:git@github.com:tencentyun/iot-device-java.git'
                    developerConnection = 'scm:git@github.com:tencentyun/iot-device-java.git'
                }
            }

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.withType(ModuleDependency) { ModuleDependency dp ->
                    if (dp.version != "unspecified") {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dp.group)
                        dependencyNode.appendNode('artifactId', dp.name)
                        dependencyNode.appendNode('version', dp.version)
                        // for exclusions
                        if (dp.excludeRules.size() > 0) {
                            def exclusions = dependencyNode.appendNode('exclusions')
                            dp.excludeRules.each { ExcludeRule ex ->
                                def exclusion = exclusions.appendNode('exclusion')
                                exclusion.appendNode('groupId', ex.group)
                                exclusion.appendNode('artifactId', ex.module)
                            }
                        }
                    }
                }
                def dependencyNode = dependenciesNode.appendNode('dependency')
                dependencyNode.appendNode('groupId', "com.tencent.iot.explorer")
                dependencyNode.appendNode('artifactId', "explorer-device-android")
                dependencyNode.appendNode('version', "${rootProject.ext.sdk.version}")
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = libVersion.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("IOT_SONATYPE_USERNAME")
                password = System.getenv("IOT_SONATYPE_PASSWORD")
            }
        }
    }
}

signing {
    if (isReleaseVersion) {
        sign publishing.publications.aar
    }
}