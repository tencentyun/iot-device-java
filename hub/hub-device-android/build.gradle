apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'


android {
    compileSdkVersion 31
    buildToolsVersion "26.0.3"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 31
        versionCode 2
        versionName "1.1"

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            java {
                srcDirs - ["src/main/java", "src/main/aidl"]
            }
            jni {
                srcDir "src/main/jni"
            }
        }
    }
    lintOptions {
        abortOnError false
    }
}

task androidJavadocs(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompile.classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

def libVersion = rootProject.ext.sdk.version
ext.isReleaseVersion = !libVersion.endsWith("SNAPSHOT")
publishing {
    publications {
        aar(MavenPublication) {
            groupId 'com.tencent.iot.hub'
            artifactId 'hub-device-android'
            version libVersion
            artifact(androidSourcesJar)
            artifact(androidJavadocsJar)
            artifact file('build/outputs/aar/hub-device-android-release.aar')

            pom {
                name = 'hub device android'
                description = 'Hub Device Android library'
                url = 'https://github.com/tencentyun/iot-device-java/tree/master/hub/hub-device-android'
                licenses {
                    license {
                        name = 'Tencent Binary License'
                        url = 'https://github.com/tencentyun/iot-device-java/blob/master/hub/hub-device-android/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'tencent_archurtan'
                        name = 'Tencent archurtan'
                        email = 'archurtan@tencent.com'
                    }
                }
                scm {
                    url = 'scm:git@github.com:tencentyun/iot-device-java.git'
                    connection = 'scm:git@github.com:tencentyun/iot-device-java.git'
                    developerConnection = 'scm:git@github.com:tencentyun/iot-device-java.git'
                }
            }

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.withType(ModuleDependency) { ModuleDependency dp ->
                    if (dp.version != "unspecified") {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dp.group)
                        dependencyNode.appendNode('artifactId', dp.name)
                        dependencyNode.appendNode('version', dp.version)

                        // for exclusions
                        if (dp.excludeRules.size() > 0) {
                            def exclusions = dependencyNode.appendNode('exclusions')
                            dp.excludeRules.each { ExcludeRule ex ->
                                def exclusion = exclusions.appendNode('exclusion')
                                exclusion.appendNode('groupId', ex.group)
                                exclusion.appendNode('artifactId', ex.module)
                            }
                        }
                    }
                }
                def dependencyNode = dependenciesNode.appendNode('dependency')
                dependencyNode.appendNode('groupId', "com.tencent.iot.hub")
                dependencyNode.appendNode('artifactId', "hub-device-java")
                dependencyNode.appendNode('version', "${rootProject.ext.sdk.version}")
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = libVersion.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("IOT_SONATYPE_USERNAME")
                password = System.getenv("IOT_SONATYPE_PASSWORD")
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.13'

    if (findProject(':hub:hub-device-java') != null) {
        api project(path: ':hub:hub-device-java')
    }
    api 'de.mindpipe.android:android-logging-log4j:1.0.3'
}

signing {
    if (isReleaseVersion) {
        sign publishing.publications.aar
    }
}

task clearLastestJavadoc(type: Delete) {
    doFirst {
        delete("javadoc/")
    }
}

task javaDoc(type: Javadoc) {

    options{
        encoding('UTF-8')
        charSet('UTF-8')
        memberLevel = JavadocMemberLevel.PUBLIC
        linkSource true
        author false
        noTree true
        noIndex true
        noNavBar true
    }
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("javadoc/")
    failOnError false
}

afterEvaluate {
    javaDoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompileProvider.get().classpath
    })
}

javaDoc.dependsOn clearLastestJavadoc
